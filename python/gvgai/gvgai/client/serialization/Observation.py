# automatically generated by the FlatBuffers compiler, do not modify

# namespace: serialization

import flatbuffers

class Observation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsObservation(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Observation()
        x.Init(buf, n + offset)
        return x

    # Observation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Observation
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Observation
    def Itype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Observation
    def ObsID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Observation
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Vector2d import Vector2d
            obj = Vector2d()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Observation
    def Reference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Vector2d import Vector2d
            obj = Vector2d()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Observation
    def SqDist(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def ObservationStart(builder): builder.StartObject(6)
def ObservationAddCategory(builder, category): builder.PrependInt32Slot(0, category, 0)
def ObservationAddItype(builder, itype): builder.PrependInt32Slot(1, itype, 0)
def ObservationAddObsID(builder, obsID): builder.PrependInt32Slot(2, obsID, 0)
def ObservationAddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def ObservationAddReference(builder, reference): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(reference), 0)
def ObservationAddSqDist(builder, sqDist): builder.PrependFloat64Slot(5, sqDist, 0.0)
def ObservationEnd(builder): return builder.EndObject()
