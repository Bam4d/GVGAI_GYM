// automatically generated by the FlatBuffers compiler, do not modify

package qmul.gvgai.engine.core.game.serialization;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Observation extends Table {
  public static Observation getRootAsObservation(ByteBuffer _bb) { return getRootAsObservation(_bb, new Observation()); }
  public static Observation getRootAsObservation(ByteBuffer _bb, Observation obj) { Constants.FLATBUFFERS_1_11_1(); _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Observation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int category() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int itype() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int obsID() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public Vector2d position() { return position(new Vector2d()); }
  public Vector2d position(Vector2d obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Vector2d reference() { return reference(new Vector2d()); }
  public Vector2d reference(Vector2d obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public double sqDist() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createObservation(FlatBufferBuilder builder,
      int category,
      int itype,
      int obsID,
      int positionOffset,
      int referenceOffset,
      double sqDist) {
    builder.startTable(6);
    Observation.addSqDist(builder, sqDist);
    Observation.addReference(builder, referenceOffset);
    Observation.addPosition(builder, positionOffset);
    Observation.addObsID(builder, obsID);
    Observation.addItype(builder, itype);
    Observation.addCategory(builder, category);
    return Observation.endObservation(builder);
  }

  public static void startObservation(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addCategory(FlatBufferBuilder builder, int category) { builder.addInt(0, category, 0); }
  public static void addItype(FlatBufferBuilder builder, int itype) { builder.addInt(1, itype, 0); }
  public static void addObsID(FlatBufferBuilder builder, int obsID) { builder.addInt(2, obsID, 0); }
  public static void addPosition(FlatBufferBuilder builder, int positionOffset) { builder.addOffset(3, positionOffset, 0); }
  public static void addReference(FlatBufferBuilder builder, int referenceOffset) { builder.addOffset(4, referenceOffset, 0); }
  public static void addSqDist(FlatBufferBuilder builder, double sqDist) { builder.addDouble(5, sqDist, 0.0); }
  public static int endObservation(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
}

