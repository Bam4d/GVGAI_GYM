// automatically generated by the FlatBuffers compiler, do not modify

package core.game.serialization;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class IntKeyValuePair extends Table {
  public static IntKeyValuePair getRootAsIntKeyValuePair(ByteBuffer _bb) { return getRootAsIntKeyValuePair(_bb, new IntKeyValuePair()); }
  public static IntKeyValuePair getRootAsIntKeyValuePair(ByteBuffer _bb, IntKeyValuePair obj) { Constants.FLATBUFFERS_1_11_1(); _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public IntKeyValuePair __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int key() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int value() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createIntKeyValuePair(FlatBufferBuilder builder,
      int key,
      int value) {
    builder.startTable(2);
    IntKeyValuePair.addValue(builder, value);
    IntKeyValuePair.addKey(builder, key);
    return IntKeyValuePair.endIntKeyValuePair(builder);
  }

  public static void startIntKeyValuePair(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addKey(FlatBufferBuilder builder, int key) { builder.addInt(0, key, 0); }
  public static void addValue(FlatBufferBuilder builder, int value) { builder.addInt(1, value, 0); }
  public static int endIntKeyValuePair(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    int val_1 = _bb.getInt(__offset(4, o1, _bb));
    int val_2 = _bb.getInt(__offset(4, o2, _bb));
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }

  public static IntKeyValuePair __lookup_by_key(IntKeyValuePair obj, int vectorLocation, int key, ByteBuffer bb) {
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int val = bb.getInt(__offset(4, bb.capacity() - tableOffset, bb));
      int comp = val > key ? 1 : val < key ? -1 : 0;
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return (obj == null ? new IntKeyValuePair() : obj).__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

