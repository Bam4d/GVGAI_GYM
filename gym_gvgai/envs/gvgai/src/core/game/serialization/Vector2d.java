// automatically generated by the FlatBuffers compiler, do not modify

package core.game.serialization;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Vector2d extends Table {
  public static Vector2d getRootAsVector2d(ByteBuffer _bb) { return getRootAsVector2d(_bb, new Vector2d()); }
  public static Vector2d getRootAsVector2d(ByteBuffer _bb, Vector2d obj) { Constants.FLATBUFFERS_1_11_1(); _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Vector2d __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double x() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double y() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createVector2d(FlatBufferBuilder builder,
      double x,
      double y) {
    builder.startTable(2);
    Vector2d.addY(builder, y);
    Vector2d.addX(builder, x);
    return Vector2d.endVector2d(builder);
  }

  public static void startVector2d(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addX(FlatBufferBuilder builder, double x) { builder.addDouble(0, x, 0.0); }
  public static void addY(FlatBufferBuilder builder, double y) { builder.addDouble(1, y, 0.0); }
  public static int endVector2d(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
}

